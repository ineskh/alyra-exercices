pragma solidity ^0.5.16;

contract Cogere {

 mapping (address => uint) organisateurs;

 constructor() internal {
   organisateurs[msg.sender] = 100;   
 }

 function transfererOrga(address orga, uint parts) public { 
     
     require (organisateurs[msg.sender] > 0 , "vous devrez etre organisateur pour transferer des parts");
     require (parts <= organisateurs[msg.sender], "vous n'avez pas assez de parts");
     require (orga != address(0));
     
     organisateurs[orga] += parts;
     organisateurs[msg.sender] -= parts;
     
     
 }
 
 function estOrga(address orga) public view returns (bool){
     return (organisateurs[orga] > 0) ;
 }
}

contract CagnotteFestival is Cogere {


 mapping (address => bool) festivaliers ;
 mapping (address => Sponsor) sponsors;
 
 uint placesRestantes;
 uint private depensesTotales;
 
 struct Sponsor {
     string name;
     address adr;
 }
 

 /*constructor() public {
     
 }*/
 

 function comptabiliserDepense(uint montant) private {
   depensesTotales += montant;
 }

 
 function acheterTicket() public payable {
   require(msg.value >= 500 finney,"Place Ã  0.5 Ethers");
   require(placesRestantes > 0,"Plus de places !");
   festivaliers[msg.sender]=true;
   placesRestantes--;
   }
 
 function payer(address payable destinataire, uint montant) public {
   require(estOrga(msg.sender));
   require(destinataire != address(0));
   require(montant > 0);
   destinataire.transfer(montant);
   
 }
 
 function () external payable {
 }
 
 function sponsoriser(string memory nom) public payable {
     
     require (sponsors[msg.sender].adr != msg.sender, "vous etes deja sponseur");
     
     require (msg.value >=30 ether, "vous devrez payer une somme superieure a 30 ethers pour devenir sponseur");
     
     sponsors[msg.sender].name = nom;
     
     sponsors[msg.sender].adr = msg.sender;
 }
 
 function setPlacesRestantes (uint _place) internal {
     placesRestantes = _place;
 }
 function getPlacesRestantes () internal view returns(uint) {
     return placesRestantes;
 } 
 
 
}